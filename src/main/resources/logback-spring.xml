<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	
	<!-- Console 출력 -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.out</Target>
        <encoder>
            <pattern>%d{yyyy:MM:dd HH:mm:ss.SSS} %-5level --- [%thread] %logger{35} : %msg %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>
    
	<!-- LogFile 출력 -->
    <appender name="LogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>./logs/application.log</File>
        <Append>true</Append>
        <encoder>
            <pattern>%d{yyyy:MM:dd HH:mm:ss.SSS} %-5level --- [%thread] %logger{35} : %msg %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./logs/application.log.%d{yyyy-MM-dd }</fileNamePattern>
        </rollingPolicy>
    </appender>
    
	<!-- ErrorFile 출력 -->
    <appender name="ErrorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>./logs/application-error.log</File>
        <encoder>
            <pattern>%d{yyyy:MM:dd HH:mm:ss.SSS} %-5level --- [%thread] %logger{35} : %msg %n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>./logs/application-error.log.%d{yyyy-MM-dd }</fileNamePattern>
        </rollingPolicy>
    </appender>

    <logger name="org.springframework" level="WARN"/>
    <logger name="org.mybatis.spring" level="WARN"/>

 	<!-- log4jdbc-log4j2 -->
    <!-- log4jdbc 옵션 설정 --> 
    <logger name="jdbc" level="OFF"/> 
    <!-- 커넥션 open close 이벤트를 로그로 남긴다. --> 
    <logger name="jdbc.connection" level="OFF"/> 
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
    <logger name="jdbc.sqlonly" level="OFF"/> 
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. --> 
    <logger name="jdbc.sqltiming" level="INFO"/> 
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. --> 
    <logger name="jdbc.audit" level="OFF"/> 
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. --> 
    <logger name="jdbc.resultset" level="OFF"/> 
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. --> 
    <logger name="jdbc.resultsettable" level="OFF"/>


	<springProfile name="dev">
	    <root level="INFO">
	 		<appender-ref ref="Console"/>
	  	    <!-- <appender-ref ref="LogFile"/>
	        <appender-ref ref="ErrorFile"/> -->
	    </root> 
	 </springProfile>
	 
 	<springProfile name="prod">
	    <root level="INFO">
	   		 <!-- <appender-ref ref="Console"/> -->
	 		<appender-ref ref="ErrorFile"/>
	     	<appender-ref ref="LogFile"/>
	    </root> 
 	</springProfile>
    
</configuration>